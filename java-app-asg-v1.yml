AWSTemplateFormatVersion: '2010-09-09'

Metadata: 
  License: Apache-2.0

Description: 'Deploy Test Java Application and ELB'

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: App server EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  WWWLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  JavaAppPort:
    Description: TCP port for the Java application
    Type: String
    MinLength: '4'
    MaxLength: '5'
    Default: 4567
    ConstraintDescription: must be a valid TCP port number from 1025-65535
  InboundELBPort:
    Description: Inbound ELB TCP port for the Java application
    Type: String
    MinLength: '2'
    MaxLength: '5'
    Default: 80
    ConstraintDescription: must be a valid TCP port number from 10-65535

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to applications instances
      VpcId: !ImportValue VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: !Ref 'JavaAppPort'
        ToPort: !Ref 'JavaAppPort'
        SourceSecurityGroupId: !Ref 'ELBSecurityGroup'
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Inbound traffic to ELB
      VpcId: !ImportValue VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref 'InboundELBPort'
        ToPort: !Ref 'InboundELBPort'
        CidrIp: !Ref 'WWWLocation'
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !ImportValue PUBSUBNET1
        - !ImportValue PUBSUBNET2
      CrossZone: 'true'
      SecurityGroups:
        - !GetAtt ['ELBSecurityGroup', GroupId]
      # Instances: [!Ref 'App1', !Ref 'App2']
      Listeners:
      - LoadBalancerPort: !Ref 'InboundELBPort'
        InstancePort: !Ref 'JavaAppPort'
        Protocol: HTTP
        # PolicyNames: [myLBPolicy]
      HealthCheck:
        # Target: HTTP:80/
        Target:
          Fn::Join:
          - ''
          - - 'HTTP:'
            - Ref: 'JavaAppPort'
            - "/"
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '10'
        Timeout: '5'
  AppServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - !ImportValue PUBSUBNET1
        - !ImportValue PUBSUBNET2
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '1'
      MaxSize: '4'
      LoadBalancerNames: [!Ref 'ElasticLoadBalancer']
    # CreationPolicy:
    #   ResourceSignal:
    #     Timeout: PT15M
    #     Count: '1'
    # UpdatePolicy:
    #   AutoScalingRollingUpdate:
    #     MinInstancesInService: '1'
    #     MaxBatchSize: '1'
    #     PauseTime: PT15M
    #     WaitOnResourceSignals: 'true'
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref 'KeyName'
      ImageId: ami-0bbcb471
      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      UserData:
        Fn::Base64: |
           #!/bin/bash
           sudo service ec2sampleapp start
           sudo chkconfig ec2sampleapp on
  AppServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'AppServerGroup'
      Cooldown: '60'
      ScalingAdjustment: '1'
  AppServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'AppServerGroup'
      Cooldown: '60'
      ScalingAdjustment: '-1'
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 50% for 4 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '120'
      EvaluationPeriods: '2'
      Threshold: '50'
      AlarmActions: [!Ref 'AppServerScaleUpPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'AppServerGroup'
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 100% for 8 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '120'
      EvaluationPeriods: '2'
      Threshold: '10'
      AlarmActions: [!Ref 'AppServerScaleDownPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'AppServerGroup'
      ComparisonOperator: LessThanThreshold

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -  
        Label:
          default: "Network Configuration"
        Parameters:
            - SSHLocation
            - WWWLocation
            - InboundELBPort
            - JavaAppPort
      - 
          Label:
             default: "EC2 Configuration"
          Parameters:
              - InstanceType
              - KeyName

Outputs:
  ELBDNS:
    Description: Public DNSName of the newly created ELB
    Value: !GetAtt [ElasticLoadBalancer, DNSName]
  ELBSGName:
    Description: Name of Security Group associated with ELB.
    Value: !GetAtt [ElasticLoadBalancer, SourceSecurityGroup.GroupName]
  ELBSGID:
    Description: Security Group ID associated with ELB
    Value: !Ref ELBSecurityGroup
  EC2SGID:
    Description: Security Group ID associated with EC2 Instances
    Value: !Ref InstanceSecurityGroup